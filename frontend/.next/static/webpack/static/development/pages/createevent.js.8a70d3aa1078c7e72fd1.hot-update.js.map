{"version":3,"file":"static/webpack/static\\development\\pages\\createevent.js.8a70d3aa1078c7e72fd1.hot-update.js","sources":["webpack:///./components/CreateMeeting.js","webpack:///./components/styles/CenterMaxWidth.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng\r\n} from \"react-places-autocomplete\";\r\nimport Router from \"next/router\";\r\nimport styled from \"styled-components\";\r\nimport Form from \"./styles/Form\";\r\nimport Error from \"./ErrorMessage\";\r\nimport SelectList from \"./SelectList\";\r\nimport CenterMaxWidth from \"./styles/CenterMaxWidth\";\r\n\r\nconst CREATE_ITEM_MUTATION = gql`\r\n  mutation CREATE_ITEM_MUTATION(\r\n    $title: String!\r\n    $description: String!\r\n    $category: String!\r\n    $image: String\r\n    $largeImage: String\r\n    $startTime: String!\r\n    $endTime: String!\r\n    $lat: Float!\r\n    $lng: Float!\r\n    $address: String!\r\n  ) {\r\n    createMeeting(\r\n      title: $title\r\n      description: $description\r\n      category: $category\r\n      image: $image\r\n      largeImage: $largeImage\r\n      startTime: $startTime\r\n      endTime: $endTime\r\n      lat: $lat\r\n      lng: $lng\r\n      address: $address\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst AutocompleteContainer = styled.div`\r\n  border-bottom: honeydew;\r\n  border-left: honeydew;\r\n  border-right: honeydew;\r\n  border-top: 1px solid #e6e6e6;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n  border-radius: 0 0 2px 2px;\r\n`;\r\n\r\nclass CreateMeeting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"dance party\",\r\n      description: \"a cool dance party\",\r\n      image: \"party.jpg\",\r\n      largeImage: \"\",\r\n      category: \"\",\r\n      startTime: \"\",\r\n      endTime: \"\",\r\n      address: \"\",\r\n      lat: \"\",\r\n      lng: \"\",\r\n      gmapsLoaded: false\r\n    };\r\n    this.toggleSelected = this.toggleSelected.bind(this);\r\n  }\r\n  handleChange = e => {\r\n    // allows us to change state of input\r\n    const { name, type, value } = e.target;\r\n    const val = type === \"number\" ? parseFloat(value) : value;\r\n    this.setState({ [name]: val });\r\n  };\r\n\r\n  // Get name of category from dropdown box\r\n  toggleSelected(value, label) {\r\n    this.setState({\r\n      category: value\r\n    });\r\n  }\r\n\r\n  handleChangeAddress = address => {\r\n    this.setState({ address });\r\n  };\r\n  // Here we get the lat and lng from google api\r\n  handleSelect = selected => {\r\n    this.setState({ address: selected });\r\n    geocodeByAddress(selected)\r\n      .then(res => getLatLng(res[0]))\r\n      .then(({ lat, lng }) => {\r\n        this.setState({\r\n          lat,\r\n          lng\r\n        });\r\n      })\r\n      .catch(error => console.error(\"Error\", error));\r\n  };\r\n\r\n  uploadFile = async e => {\r\n    console.log(\"uploading file..\");\r\n    const files = e.target.files;\r\n    const data = new FormData();\r\n    data.append(\"file\", files[0]);\r\n    data.append(\"upload_preset\", \"meeter\");\r\n\r\n    const res = await fetch(\r\n      \"https://api.cloudinary.com/v1_1/da91pbpmj/image/upload\",\r\n      {\r\n        method: \"POST\",\r\n        body: data\r\n      }\r\n    );\r\n    const file = await res.json();\r\n    console.log(file);\r\n    if (!file.error) {\r\n      this.setState({\r\n        image: file.secure_url,\r\n        largeImage: file.eager[0].secure_url\r\n      });\r\n    }\r\n  };\r\n\r\n  initMap = () => {\r\n    this.setState({\r\n      gmapsLoaded: true\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.initMap = this.initMap;\r\n    const gmapScriptEl = document.createElement(`script`);\r\n    gmapScriptEl.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyC-syviZl4VJqqgBlhXxTu4_s3cnXEajDY&libraries=places&callback=initMap`;\r\n    document\r\n      .querySelector(`body`)\r\n      .insertAdjacentElement(`beforeend`, gmapScriptEl);\r\n  }\r\n  render() {\r\n    return (\r\n      <CenterMaxWidth>\r\n        <Mutation mutation={CREATE_ITEM_MUTATION} variables={this.state}>\r\n          {(createMeeting, { loading, error }) => (\r\n            <Form\r\n              onSubmit={async e => {\r\n                // stop form from submitting\r\n                e.preventDefault();\r\n                // call the mutation\r\n                const res = await createMeeting();\r\n                // change them to the single meeting page\r\n                console.log(res);\r\n                Router.push({\r\n                  pathname: \"/meeting\",\r\n                  query: { id: res.data.createMeeting.id }\r\n                });\r\n              }}\r\n            >\r\n              <Error error={error} />\r\n              <h2>Create a Meeting</h2>\r\n              <fieldset disabled={loading} aria-busy={loading}>\r\n                <label htmlFor=\"file\">\r\n                  Image\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"file\"\r\n                    name=\"file\"\r\n                    placeholder=\"Upload an image\"\r\n                    required\r\n                    onChange={this.uploadFile}\r\n                  />\r\n                  {this.state.image && (\r\n                    <img\r\n                      width=\"200\"\r\n                      src={this.state.image}\r\n                      alt=\"Upload Preview\"\r\n                    />\r\n                  )}\r\n                </label>\r\n\r\n                <label htmlFor=\"title\">\r\n                  Title\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    name=\"title\"\r\n                    placeholder=\"Title\"\r\n                    required\r\n                    value={this.state.title}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <label htmlFor=\"Address\">\r\n                  {/* LNG AND LAT GOOGLE API */}\r\n                  {this.state.gmapsLoaded && (\r\n                    <PlacesAutocomplete\r\n                      value={this.state.address}\r\n                      onChange={this.handleChangeAddress}\r\n                      onSelect={this.handleSelect}\r\n                      shouldFetchSuggestions={this.state.address.length > 2}\r\n                    >\r\n                      {({\r\n                        getInputProps,\r\n                        suggestions,\r\n                        getSuggestionItemProps,\r\n                        loading\r\n                      }) => (\r\n                        <div>\r\n                          <input\r\n                            {...getInputProps({\r\n                              placeholder: \"Search Places ...\",\r\n                              className: \"location-search-input\"\r\n                            })}\r\n                          />\r\n                          <AutocompleteContainer>\r\n                            {loading && <div>Loading...</div>}\r\n                            {suggestions.map(suggestion => {\r\n                              const className = suggestion.active\r\n                                ? \"suggestion-item--active\"\r\n                                : \"suggestion-item\";\r\n                              // inline style for demonstration purpose\r\n                              const style = suggestion.active\r\n                                ? {\r\n                                    backgroundColor: \"#fafafa\",\r\n                                    cursor: \"pointer\"\r\n                                  }\r\n                                : {\r\n                                    backgroundColor: \"#ffffff\",\r\n                                    cursor: \"pointer\"\r\n                                  };\r\n                              return (\r\n                                <div\r\n                                  {...getSuggestionItemProps(suggestion, {\r\n                                    className,\r\n                                    style\r\n                                  })}\r\n                                >\r\n                                  <span>{suggestion.description}</span>\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </AutocompleteContainer>\r\n                        </div>\r\n                      )}\r\n                    </PlacesAutocomplete>\r\n                  )}\r\n                </label>\r\n\r\n                <label htmlFor=\"Category\">\r\n                  <SelectList toggleItem={this.toggleSelected} />\r\n                </label>\r\n\r\n                <label htmlFor=\"startTime\">\r\n                  Start Time\r\n                  <input\r\n                    type=\"time\"\r\n                    id=\"startTime\"\r\n                    name=\"startTime\"\r\n                    placeholder=\"startTime\"\r\n                    required\r\n                    value={this.state.startTime}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n\r\n                <label htmlFor=\"endTime\">\r\n                  End Time\r\n                  <input\r\n                    type=\"time\"\r\n                    id=\"endTime\"\r\n                    name=\"endTime\"\r\n                    placeholder=\"endTime\"\r\n                    required\r\n                    value={this.state.endTime}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n\r\n                <label htmlFor=\"description\">\r\n                  Description\r\n                  <textarea\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    placeholder=\"Enter A Description\"\r\n                    required\r\n                    value={this.state.description}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <button type=\"submit\">Submit</button>\r\n              </fieldset>\r\n            </Form>\r\n          )}\r\n        </Mutation>\r\n      </CenterMaxWidth>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateMeeting;\r\nexport { CREATE_ITEM_MUTATION };\r\n","import styled from \"styled-components\";\r\n\r\nconst CenterMaxWidth = styled.div`\r\n  max-width: ${props => props.theme.maxWidth};\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default CenterMaxWidth;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AA8BA;AAAA;AAAA;AAAA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkBA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAvBA;AAgCA;AAAA;AAAA;AACA;AACA;AAlCA;AAoCA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AA/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAUA;AACA;AAFA;AACA;AAVA;AAOA;AAPA;AAAA;AACA;AADA;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjDA;AAAA;AAAA;AAAA;AACA;AADA;AAyEA;AACA;AADA;AAGA;AACA;AA3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAfA;AAgBA;AACA;;;AAOA;AACA;AACA;AACA;AADA;AAGA;;;AAiDA;AACA;AACA;AACA;AACA;AAGA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcvCA;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlJA;AAyJA;;;;AApPA;AACA;AAsPA;;;;;;;;;;;;;AC5SA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;;;;A","sourceRoot":""}